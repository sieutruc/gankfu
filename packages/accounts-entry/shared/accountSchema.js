userPlace = {};

// define the custom error message for the input data
SimpleSchema.messages({
  locationSoGeneral: "Your chosen [label] is so general.",
});

accountSchema = new SimpleSchema({
  username: {
    type: String,
    label: 'User name',
    optional: true,
    min: 8
  },
  email: {
    type: String,
    label: 'Email',
    regEx: SimpleSchema.RegEx.Email
  },
  place: {
    type: String,
    label: 'location',
    custom: function() {
      var geo, location, placeLoc, result;
      if (this.isSet) {
        geo = new GeoCoder();
        location = this.field('location').value;
        result = geo.geocode(this.value);
        //location = {"latitude":48.85661400000001,"longitude":2.3522219000000177};
        //console.log(result);
        if (location) {
          //placeLoc = JSON.parse(location);
          placeLoc = location;
          console.log(placeLoc);

          userPlace = _.find(result, function(loc) {
            return parseFloat(loc.latitude).toFixed(0) === parseFloat(placeLoc.latitude).toFixed(0)
                && parseFloat(loc.longitude).toFixed(0) === parseFloat(placeLoc.longitude).toFixed(0);
          });
          //console.log(userPlace);
          if (userPlace != null) {
            // only pass if the city is defined
            if (! userPlace['city'] &&  ! userPlace['state'])
              return 'locationSoGeneral';
            userPlace['place'] = this.value;
            return;
          }
        }
        return 'required';
      }
    }
  },
  location: {
    type: String,
    min: 4
  }
});


accountTestContext = accountSchema.pick(['place','location']).namedContext('testSchema');
//accountTestContext.addInvalidKeys([{name: "place", type: "wrongPassword"}]);

// ---
// generated by coffee-script 1.9.2